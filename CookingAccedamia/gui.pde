/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void changeoventemp(GKnob source, GEvent event) { //_CODE_:Temp:491161:
  println("Temp - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:Temp:491161:

public void changetimeforoven(GKnob source, GEvent event) { //_CODE_:time:476537:
  println("time - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:time:476537:

synchronized public void Receipe_Window(PApplet appc, GWinData data) { //_CODE_:Receipe:431125:
  appc.background(230);
} //_CODE_:Receipe:431125:

synchronized public void Music_Window(PApplet appc, GWinData data) { //_CODE_:Music:895587:
  appc.background(230);
} //_CODE_:Music:895587:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Main window");
  Temp = new GKnob(this, 138, 40, 60, 60, 0.8);
  Temp.setTurnRange(110, 70);
  Temp.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Temp.setSensitivity(1);
  Temp.setShowArcOnly(false);
  Temp.setOverArcOnly(false);
  Temp.setIncludeOverBezel(false);
  Temp.setShowTrack(true);
  Temp.setTurnMode(GKnob.CTRL_ANGULAR);
  Temp.setLimits(100.0, 0.0, 300.0);
  Temp.setShowTicks(true);
  Temp.setOpaque(false);
  Temp.addEventHandler(this, "changeoventemp");
  ovenstemp = new GLabel(this, 55, 60, 80, 20);
  ovenstemp.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  ovenstemp.setText("Temp");
  ovenstemp.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  ovenstemp.setOpaque(false);
  time = new GKnob(this, 294, 39, 60, 60, 0.8);
  time.setTurnRange(110, 70);
  time.setTurnMode(GKnob.CTRL_HORIZONTAL);
  time.setSensitivity(1);
  time.setShowArcOnly(false);
  time.setOverArcOnly(false);
  time.setIncludeOverBezel(false);
  time.setShowTrack(true);
  time.setTurnMode(GKnob.CTRL_ANGULAR);
  time.setLimits(0.0, 0.0, 40.0);
  time.setShowTicks(true);
  time.setOpaque(false);
  time.addEventHandler(this, "changetimeforoven");
  timelabel = new GLabel(this, 351, 58, 80, 20);
  timelabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  timelabel.setText("Time");
  timelabel.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  timelabel.setOpaque(false);
  Receipe = GWindow.getWindow(this, "Receipe", 800, 200, 800, 400, JAVA2D);
  Receipe.noLoop();
  Receipe.setActionOnClose(G4P.KEEP_OPEN);
  Receipe.addDrawHandler(this, "Receipe_Window");
  Music = GWindow.getWindow(this, "Music", 0, 200, 800, 400, JAVA2D);
  Music.noLoop();
  Music.setActionOnClose(G4P.KEEP_OPEN);
  Music.addDrawHandler(this, "Music_Window");
  Receipe.loop();
  Music.loop();
}

// Variable declarations 
// autogenerated do not edit
GKnob Temp; 
GLabel ovenstemp; 
GKnob time; 
GLabel timelabel; 
GWindow Receipe;
GWindow Music;
